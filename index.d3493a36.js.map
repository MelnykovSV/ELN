{"mappings":"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","sources":["src/js/molMass.js"],"sourcesContent":["const molar = new Array();\nmolar['H'] = 1.00794;\nmolar['He'] = 4.0026;\nmolar['Li'] = 6.941;\nmolar['Be'] = 9.01218;\nmolar['B'] = 10.811;\nmolar['C'] = 12.011;\nmolar['N'] = 14.0067;\nmolar['O'] = 15.9994;\nmolar['F'] = 18.9984;\nmolar['Ne'] = 20.1797;\nmolar['Na'] = 22.98977;\nmolar['Mg'] = 24.305;\nmolar['Al'] = 26.98154;\nmolar['Si'] = 28.0855;\nmolar['P'] = 30.97376;\nmolar['S'] = 32.066;\nmolar['Cl'] = 35.4527;\nmolar['Ar'] = 39.948;\nmolar['K'] = 39.0983;\nmolar['Ca'] = 40.078;\nmolar['Sc'] = 44.9559;\nmolar['Ti'] = 47.88;\nmolar['V'] = 50.9415;\nmolar['Cr'] = 51.996;\nmolar['Mn'] = 54.938;\nmolar['Fe'] = 55.847;\nmolar['Co'] = 58.9332;\nmolar['Ni'] = 58.6934;\nmolar['Cu'] = 63.546;\nmolar['Zn'] = 65.39;\nmolar['Ga'] = 69.723;\nmolar['Ge'] = 72.61;\nmolar['As'] = 74.9216;\nmolar['Se'] = 78.96;\nmolar['Br'] = 79.904;\nmolar['Kr'] = 83.8;\nmolar['Rb'] = 85.4678;\nmolar['Sr'] = 87.62;\nmolar['Y'] = 88.9059;\nmolar['Zr'] = 91.224;\nmolar['Nb'] = 92.9064;\nmolar['Mo'] = 95.94;\nmolar['Tc'] = 98;\nmolar['Ru'] = 101.07;\nmolar['Rh'] = 102.9055;\nmolar['Pd'] = 106.42;\nmolar['Ag'] = 107.868;\nmolar['Cd'] = 112.41;\nmolar['In'] = 114.82;\nmolar['Sn'] = 118.71;\nmolar['Sb'] = 121.757;\nmolar['Te'] = 127.6;\nmolar['I'] = 126.9045;\nmolar['Xe'] = 131.29;\nmolar['Cs'] = 132.9054;\nmolar['Ba'] = 137.33;\nmolar['La'] = 138.9055;\nmolar['Ce'] = 140.12;\nmolar['Pr'] = 140.9077;\nmolar['Nd'] = 144.24;\nmolar['Pm'] = 145;\nmolar['Sm'] = 150.36;\nmolar['Eu'] = 151.965;\nmolar['Gd'] = 157.25;\nmolar['Tb'] = 158.9253;\nmolar['Dy'] = 162.5;\nmolar['Ho'] = 164.9303;\nmolar['Er'] = 167.26;\nmolar['Tm'] = 168.9342;\nmolar['Yb'] = 173.04;\nmolar['Lu'] = 174.967;\nmolar['Hf'] = 178.49;\nmolar['Ta'] = 180.9479;\nmolar['W'] = 183.85;\nmolar['Re'] = 186.207;\nmolar['Os'] = 190.2;\nmolar['Ir'] = 192.22;\nmolar['Pt'] = 195.08;\nmolar['Au'] = 196.9665;\nmolar['Hg'] = 200.59;\nmolar['Tl'] = 204.383;\nmolar['Pb'] = 207.2;\nmolar['Bi'] = 208.9804;\nmolar['Po'] = 209;\nmolar['At'] = 210;\nmolar['Rn'] = 222;\nmolar['Fr'] = 223;\nmolar['Ra'] = 226.0254;\nmolar['Ac'] = 227;\nmolar['Th'] = 232.0381;\nmolar['Pa'] = 231.0359;\nmolar['U'] = 238.029;\nmolar['Np'] = 237.0482;\nmolar['Pu'] = 244;\nmolar['Am'] = 243;\nmolar['Cm'] = 247;\nmolar['Bk'] = 247;\nmolar['Cf'] = 251;\nmolar['Es'] = 252;\nmolar['Fm'] = 257;\nmolar['Md'] = 258;\nmolar['No'] = 259;\nmolar['Lr'] = 266;\nmolar['Rf'] = 267;\nmolar['Db'] = 268;\nmolar['Sg'] = 269;\nmolar['Bh'] = 270;\nmolar['Hs'] = 269;\nmolar['Mt'] = 278;\nmolar['Ds'] = 281;\nmolar['Rg'] = 282;\nmolar['Cn'] = 285;\nmolar['Nh'] = 286;\nmolar['Fl'] = 289;\nmolar['Mc'] = 290;\nmolar['Lv'] = 293;\nmolar['Ts'] = 294;\nmolar['Og'] = 294;\nmolar['Me'] = 15.035;\nmolar['Et'] = 29.062;\nmolar['Pr'] = 43.089;\nmolar['Bu'] = 57.115;\nmolar['Ts'] = 155.197;\nmolar['Aq'] = 18.015;\nmolar['Ph'] = 77.106;\n// molar[\"Ac\"]= 43.045;\nconst uppers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst lowers = 'abcdefghijklmnopqrstuvwxyz';\nconst nums = '1234567890';\n\nfunction init() {\n  let inputField = document.getElementById('formula');\n  let formula = inputField.value;\n  console.log(formula);\n  let result = calc(formula);\n  displayResult(result.atoms, result.mass);\n}\n\n/**\n * Reads all atoms in the formula, adds up all their molar masses.\n * @param {String} formula\n * @returns {JSON} Object containing an array of atoms found, and a number with the mass calculated.\n */\nfunction calc(formula) {\n  let mass = 0;\n  let atoms = interpFormula(formula);\n  atoms.forEach(atom => {\n    mass += molar[atom];\n  });\n  mass = mass.toPrecision(6);\n  return { atoms, mass };\n}\n\n/**\n * Reads the formula and returns an array with all the atoms.\n * @param {String} formula\n * @returns {Arrray} an array with all found atoms in it, as strings.\n */\nfunction interpFormula(formula) {\n  let atoms = [];\n\n  for (let i = 0; i < formula.length; i++) {\n    let c = formula.charAt(i);\n    if (uppers.includes(c)) {\n      let nc = formula.charAt(i + 1);\n      if (uppers.includes(nc) || nums.includes(nc) || nc == '(') {\n        atoms.push(c);\n      } else if (lowers.includes(nc)) {\n        atoms.push('' + c + nc);\n      }\n    } else if (nums.includes(c) && i > 0) {\n      let number = getNumberStartingAt(i, formula);\n\n      let atomPos = atoms.length - 1;\n      for (let j = 1; j < number; j++) {\n        atoms.push(atoms[atomPos]);\n      }\n\n      i += ('' + number).length - 1;\n    } else if (c == '(') {\n      let start = i;\n      let size = 0;\n      do {\n        ++size;\n      } while (\n        formula.charAt(start + size) != ')' &&\n        start + size < formula.length\n      );\n\n      let subformula = formula.substring(start + 1, start + size);\n      let innerAtoms = interpFormula(subformula);\n      i += size;\n\n      if (nums.includes(formula.charAt(start + size + 1))) {\n        let number = getNumberStartingAt(i + 1, formula);\n        i += ('' + number).length;\n        do {\n          atoms = atoms.concat(innerAtoms);\n        } while (1 < number--);\n      } else {\n        atoms = atoms.concat(innerAtoms);\n      }\n    }\n  }\n\n  return atoms;\n}\n\n/**\n * Reads a number contained inside string 'formula', starting at position 'i'.\n * Used in 'interpFormula' to read numbers.\n * Checks the characters one by one and stops when the character is not a number.\n * Returns the substring found to contain consecutive numbers starting from position 'i'.\n * @param {Number} i\n * @param {String} formula\n * @returns {Number} Number found inside formula, starting at 'i' and ending somewhere else in the string.\n */\nfunction getNumberStartingAt(i, formula) {\n  let checkNext = true;\n  let pos = i;\n  do {\n    if (!nums.includes(formula.charAt(pos))) {\n      checkNext = false;\n    } else {\n      pos++;\n    }\n  } while (checkNext && pos < formula.length);\n\n  return parseInt(formula.substring(i, pos + 1));\n}\n\nfunction displayResult(atoms, mass) {\n  console.log(mass);\n  let resultContainer = document.getElementById('result');\n  resultContainer.innerHTML = `${mass} g/mol`;\n  let atomsstr = '<br>Found:';\n  atoms.forEach(atom => {\n    atomsstr += ' ' + atom;\n  });\n  resultContainer.innerHTML += atomsstr;\n}\n"],"names":["molar","Array","uppers","lowers","nums","init","formula","document","getElementById","value","console","log","result","calc","displayResult","atoms","mass","interpFormula","forEach","atom","toPrecision","i","length","c","charAt","includes","nc","push","number","getNumberStartingAt","atomPos","j","start","size","innerAtoms","substring","number1","concat","checkNext","pos","parseInt","resultContainer","innerHTML","atomsstr"],"version":3,"file":"index.d3493a36.js.map"}