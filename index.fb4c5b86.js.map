{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_define_property.js","src/js/fraction.js","src/js/compound.js","src/js/renderCompoundForm.js","src/js/scheme.js","src/js/page.js","src/js/eln.js","src/js/localStorage.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","export class Fraction {\n  static fractionGlobalID = 0;\n  // #mass;\n  // #purity;\n  // #isNMR;\n  // #isLCMS;\n  // #comment;\n  constructor() {\n    this.fractionGlobalID = Fraction.fractionGlobalID += 1;\n    this.mass = null;\n    this.purity = null;\n    this.isNMR = false;\n    this.isLCMS = false;\n    this.comment = false;\n  }\n}\n","import { Fraction } from './fraction';\n\nexport class Compound {\n  static compoundGlobalID = 0;\n  // #mw;\n  // #smiles;\n  // #isTestSuccessful;\n  // #isScalingSuccessful;\n  // #fractions;\n\n  constructor(\n    {\n      // compoundGlobalID = (Compound.compoundGlobalID += 1),\n      mw = null,\n      dbID = null,\n      smiles = null,\n      isTestSuccessful = false,\n      isScalingSuccessful = false,\n      fractions = [],\n    } = {},\n    globalCompoundID\n  ) {\n    this.compoundGlobalID = globalCompoundID;\n    this.mw = mw;\n    this.smiles = smiles;\n    this.isTestSuccessful = isTestSuccessful;\n    this.isScalingSuccessful = isScalingSuccessful;\n    this.fractions = fractions;\n    this.dbID = dbID;\n  }\n\n  // get isTestSuccessful() {\n  //   return this.#isTestSuccessful;\n  // }\n  // get isScalingSuccessful() {\n  //   return this.#isScalingSuccessful;\n  // }\n\n  // set isTestSuccessful(value) {\n  //   if (typeof value === 'boolean') {\n  //     this.#isTestSuccessful = value;\n  //   } else {\n  //     throw new Error('Value must be a boolean');\n  //   }\n  // }\n  // set isScalingSuccessful(value) {\n  //   if (typeof value === 'boolean') {\n  //     this.#isScalingSuccessful = value;\n  //   } else {\n  //     throw new Error('Value must be a boolean');\n  //   }\n  // }\n\n  addFraction() {\n    this.fractions.push(new Fraction());\n  }\n}\n","export function renderCompoundForm(\n  {\n    compoundGlobalID,\n    mw = '',\n    smiles = '',\n    isTestSuccessful,\n    isScalingSuccessful,\n    dbID = '',\n    fractions,\n  } = {},\n  schemeID,\n  isLastInScheme\n) {\n  const mainPage = document.querySelector(`[data-schemeid='${schemeID}']`);\n  const markup = `<form action=\"#\" class=\"compound-form\" data-id='${compoundGlobalID}' data-schemeID=''>\n    <div class=\"compound-form__body\">\n      <div class=\"compound-form__upper-part\">\n        <div class=\"compound-form-canvas-container\">\n          <canvas id=\"canvas${compoundGlobalID}\"></canvas>\n        </div>\n        <div class=\"compound-form__compound-data\">\n          <label class=\"\">\n            ID\n            <input type=\"text\" name=\"dbID\" value=\"${dbID}\" />\n          </label>\n          <label class=\"\">\n            MW\n            <input class='compound-form__mw-input' type=\"text\" name=\"mw\" value=\"${mw}\" />\n          </label>\n          <label>\n            <input type=\"checkbox\" id=\"\" name=\"isTestSuccessful\" ${\n              isTestSuccessful === true ? 'checked' : ''\n            } />\n            Test\n          </label>\n          <label>\n            <input type=\"checkbox\" id=\"\" name=\"isScalingSuccessful\" ${\n              isScalingSuccessful === true ? 'checked' : ''\n            } />\n            Scaling\n          </label>\n        </div>\n      </div>\n      <div class=\"compound-form__lower-part\">\n        <label class=\"text-input-label\">\n          SMILES\n          <input type=\"text\" name=\"smiles\" value=\"${smiles}\" />\n        </label>\n        <div class=\"compound-from__button-block\">\n          <button type=\"submit\">Add task</button>\n          <button type=\"submit\" name='addCompound' ${\n            isLastInScheme !== 'last' ? 'disabled' : ''\n          }>Add compund</button>\n          <label>\n            Fractions\n            <input type=\"checkbox\" name=\"\" id=\"\" />\n          </label>\n        </div>\n      </div>\n    </div>\n    <div class=\"compound-form__fractions\">\n      <div class=\"compound-form__fractions-main\">\n        <label>\n          Fractions\n          <select name=\"\" id=\"\">\n            <option value=\"\">Fraction 1</option>\n            <option value=\"\">Fraction 2</option>\n          </select>\n        </label>\n        <button type=\"submit\">Add fraction</button>\n      </div>\n      <div class=\"compound-form__single-fraction\">\n        <div class=\"compound-form__single-fraction-upper-part\">\n          <div class=\"compound-form__single-fraction-characteristics\">\n            <label class=\"\">\n              Mass\n              <input type=\"text\" />\n            </label>\n            <label class=\"\">\n              Purity\n              <input type=\"text\" />\n            </label>\n          </div>\n          <div class=\"compound-form__single-fraction-spectra\">\n            <label>\n              <input type=\"checkbox\" name=\"\" id=\"\" />\n              NMR\n            </label>\n            <label>\n              <input type=\"checkbox\" name=\"\" id=\"\" />\n              LCMS\n            </label>\n          </div>\n        </div>\n        <div class=\"compound-form__single-fraction-lower-part\">\n          <label class=\"\">\n            Comments\n            <textarea name=\"\" id=\"\" cols=\"30\" rows=\"3\"></textarea>\n          </label>\n        </div>\n      </div>\n    </div>\n  </form>`;\n  mainPage.insertAdjacentHTML('beforeend', markup);\n}\n","import { Compound } from './compound.js';\nimport { renderCompoundForm } from './renderCompoundForm.js';\n\nexport class Scheme {\n  static globalSchemeID = 0;\n  // #body;\n  constructor({\n    globalSchemeID = (Scheme.globalSchemeID += 1),\n    body = [],\n  } = {}) {\n    this.globalSchemeID = globalSchemeID;\n    this.body = body;\n    // if (this.body.length === 0) {\n    //   this.body.push(new Compound());\n    // }\n  }\n\n  addCompound(globalCompoundID) {\n    this.body.push(new Compound({}, globalCompoundID));\n    // renderCompoundForm();\n  }\n\n  // get body() {\n  //   return this.#body;\n  // }\n}\n","import { Scheme } from './scheme';\n\nexport class Page {\n  body;\n  constructor({ body = [] } = {}) {\n    this.body = body;\n    // if (this.body.length === 0) {\n    //   this.body.push(new Scheme());\n    // }\n  }\n\n  //   get body() {\n  //     return this.#body;\n  //   }\n  addScheme(globalSchemeID) {\n    this.body.push(new Scheme({}, globalSchemeID));\n    // renderCompoundForm();\n  }\n}\n","import { Scheme } from './scheme.js';\nimport { Compound } from './compound.js';\nimport { Fraction } from './fraction.js';\nimport { Page } from './page.js';\nimport { renderCompoundForm } from './renderCompoundForm.js';\n\n// import { conformsTo } from 'lodash';\nimport { getFromLocalStorage } from './localStorage.js';\n// import { Drawer } from './../../node_modules/smiles-drawer/dist/smiles-drawer.min';\n// const SmilesDrawer = require('smiles-drawer');\n// const SmilesDrawer = require('./../../node_modules/smiles-drawer/dist/smiles-drawer.min');\n\nconst pageButton = document.querySelector('.page-button');\nconst schemeButton = document.querySelector('.scheme-button');\n\nconst sheet = document.querySelector('.sheet');\n\nlet globalCompoundID = parseInt(localStorage.getItem('globalCompoundID')) || 0;\nlet globalSchemeID = parseInt(localStorage.getItem('globalSchemeID')) || 0;\n\nlet options = {\n  width: 150,\n  height: 150,\n};\n\nlet smilesDrawer = new SmilesDrawer.Drawer(options);\n\n///Initial loading page data  from localstorage and renderinf of the page\nlet page = getFromLocalStorage();\n\nif (page === null) {\n  page = new Page();\n}\n\nif (page.body.length !== 0) {\n  for (let i = 0; i < page.body.length; i += 1) {\n    const currentScemeID = page.body[i].globalSchemeID;\n    sheet.insertAdjacentHTML(\n      'beforeend',\n      `<div class=\"scheme\" data-schemeID='${currentScemeID}'></div>`\n    );\n    const scheme = page.body[i];\n    const sortedSchemeBody = scheme.body.sort((a, b) => {\n      a.compoundGlobalID - b.compoundGlobalID;\n    });\n    for (const item of sortedSchemeBody) {\n      switch (item) {\n        case sortedSchemeBody[sortedSchemeBody.length - 1]:\n          renderCompoundForm(item, currentScemeID, 'last');\n          break;\n        default:\n          renderCompoundForm(item, currentScemeID);\n      }\n      // renderCompoundForm(item);\n      SmilesDrawer.parse(item.smiles, function (tree) {\n        smilesDrawer.draw(\n          tree,\n          `canvas${item.compoundGlobalID}`,\n          'light',\n          false\n        );\n      });\n    }\n  }\n} else {\n  console.log('local storage is empty');\n}\n\nconst schemes = document.querySelectorAll('.scheme');\n\n/// This listener creates a new form on \"Add compound\" button click. It calculates new  globalCompoundID and saves new value to localStorage,\n/// add new compound object to the page object, render the form, adds eventlisteners to it and saves new page object to localstorage\n\nfor (const scheme of schemes) {\n  scheme.addEventListener('click', e => {\n    const currentSchemeID = e.currentTarget.dataset.schemeid;\n\n    if (e.target.name === 'addCompound') {\n      e.preventDefault();\n      globalCompoundID += 1;\n      e.target.disabled = true;\n      // console.log(e.currentTarget.parentElement);\n      localStorage.setItem('globalCompoundID', globalCompoundID);\n      page.body[currentSchemeID - 1].addCompound(globalCompoundID);\n      renderCompoundForm(\n        page.body[currentSchemeID - 1].body[\n          page.body[currentSchemeID - 1].body.length - 1\n        ],\n        e.currentTarget.dataset.schemeid,\n        'last'\n      );\n      if (scheme.lastChild) {\n        scheme.lastChild.addEventListener('input', e => {\n          textInputHandler(e, currentSchemeID);\n        });\n        scheme.lastChild.addEventListener('change', e => {\n          checkboxClicksHandler(e, currentSchemeID);\n        });\n        localStorage.setItem('pageBody', JSON.stringify(page));\n      }\n    }\n  });\n}\n\nschemeButton.addEventListener('click', () => {\n  console.log('scheme id before adding: ' + globalSchemeID);\n  globalSchemeID += 1;\n  const currentSchemeID = globalSchemeID;\n  console.log('scheme id after adding: ' + currentSchemeID);\n  localStorage.setItem('globalSchemeID', currentSchemeID);\n  page.addScheme(currentSchemeID);\n  sheet.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"scheme\" data-schemeID='${currentSchemeID}'></div>`\n  );\n  globalCompoundID += 1;\n  const currentCompoundID = globalCompoundID;\n  localStorage.setItem('globalCompoundID', globalCompoundID);\n  console.log(page.body[currentSchemeID - 1]);\n  page.body[currentSchemeID - 1].addCompound(currentCompoundID);\n  renderCompoundForm(\n    page.body[currentSchemeID - 1].body[0],\n    currentSchemeID,\n    'last'\n  );\n  console.log(\n    `added new scheme with id ${currentSchemeID} with a new form(id: ${currentCompoundID})`\n  );\n\n  const addedScheme = document.querySelector('.sheet').lastChild;\n  const lastChild = addedScheme.lastChild;\n\n  console.log('currentSchemeID!!!!!' + currentSchemeID);\n  console.log(addedScheme);\n  console.log(addedScheme.lastChild);\n\n  addedScheme.addEventListener('click', e => {\n    const currentSchemeID = e.currentTarget.dataset.schemeid;\n    // console.log(schemes);\n    // console.log(currentSchemeID);\n    console.log(addedScheme);\n\n    if (e.target.name === 'addCompound') {\n      e.preventDefault();\n      globalCompoundID += 1;\n      e.target.disabled = true;\n      // console.log(e.currentTarget.parentElement);\n      localStorage.setItem('globalCompoundID', globalCompoundID);\n      page.body[currentSchemeID - 1].addCompound(globalCompoundID);\n      renderCompoundForm(\n        page.body[currentSchemeID - 1].body[\n          page.body[currentSchemeID - 1].body.length - 1\n        ],\n        e.currentTarget.dataset.schemeid,\n        'last'\n      );\n      console.log(addedScheme);\n      console.log(addedScheme.lastChild);\n      if (addedScheme.lastChild) {\n        addedScheme.lastChild.addEventListener('input', e => {\n          textInputHandler(e, currentSchemeID);\n        });\n        addedScheme.lastChild.addEventListener('change', e => {\n          checkboxClicksHandler(e, currentSchemeID);\n        });\n        localStorage.setItem('pageBody', JSON.stringify(page));\n      }\n    }\n  });\n\n  if (addedScheme.lastChild) {\n    addedScheme.lastChild.addEventListener('input', e => {\n      textInputHandler(e, currentSchemeID);\n    });\n    addedScheme.lastChild.addEventListener('change', e => {\n      checkboxClicksHandler(e, currentSchemeID);\n    });\n    localStorage.setItem('pageBody', JSON.stringify(page));\n  } else {\n    alert('UNKNOWN ERROR OCCURED!!! PLEASE RELOAD THE PAGE');\n  }\n\n  localStorage.setItem('pageBody', JSON.stringify(page));\n});\n\nconst formsCollection = document.querySelectorAll('[data-id]');\nconsole.log(formsCollection);\n\n// for (scheme of schemes) {\n//   const currentSchemeID = scheme.dataset.schemeid;\n//   for (item of formsCollection) {\n//     console.log(item.dataset.id);\n//     item.addEventListener('input', e => {\n//       textInputHandler(e, currentSchemeID);\n//     });\n//     item.addEventListener('change', e => {\n//       checkboxClicksHandler(e, currentSchemeID);\n//     });\n//   }\n// }\nfor (const form of formsCollection) {\n  form.addEventListener('input', e => {\n    console.log(form.parentNode.dataset.schemeid);\n    console.log(form);\n    textInputHandler(e, form.parentNode.dataset.schemeid);\n  });\n  form.addEventListener('change', e => {\n    checkboxClicksHandler(e, form.parentNode.dataset.schemeid);\n  });\n}\n\n// for (let i = 0; i < formsCollection.length; i += 1) {\n//   formsCollection[i].addEventListener('input', e => {\n//     console.log(formsCollection[i].parentNode.dataset.schemeid);\n//     console.log(formsCollection[i]);\n//     textInputHandler(e, formsCollection[i].parentNode.dataset.schemeid);\n//   });\n//   formsCollection[i].addEventListener('change', e => {\n//     checkboxClicksHandler(e, formsCollection[i].parentNode.dataset.schemeid);\n//   });\n// }\n\n///Checks if the target is text input and if it is - on change saves its value  to localstorage\n/// If it is a SMILES input - draws molecule to canvas\nconsole.log(page);\nfunction textInputHandler(e, schemeID) {\n  console.log('this:' + schemeID);\n  // e.currentTarget.dataset.globalSchemeID\n  if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n    const compoundObject = page.body[schemeID - 1].body.find(\n      item => item.compoundGlobalID === parseInt(e.currentTarget.dataset.id)\n    );\n\n    console.log(page.body[schemeID - 1].body);\n    compoundObject[e.target.name] = e.target.value;\n    localStorage.setItem('pageBody', JSON.stringify(page));\n\n    if (e.target.name === 'smiles') {\n      const molWeightInput = e.currentTarget.querySelector(\n        '.compound-form__mw-input'\n      );\n      SmilesDrawer.parse(e.target.value, function (tree) {\n        smilesDrawer.draw(\n          tree,\n          `canvas${e.currentTarget.dataset.id}`,\n          'light',\n          false\n        );\n      });\n\n      SmilesDrawer.parse(e.target.value, tree => {\n        const formula = smilesDrawer.getMolecularFormula(tree);\n        molWeightInput.value = calc(formula).mass;\n        compoundObject.mw = calc(formula).mass;\n        localStorage.setItem('pageBody', JSON.stringify(page));\n      });\n    }\n  }\n}\n\n///Checks if the target is checkbox and if it is - on change saves its value  to localstorage\n\nfunction checkboxClicksHandler(e, id) {\n  console.log('this:' + id);\n  if (e.target.nodeName === 'INPUT' && e.target.type === 'checkbox') {\n    const compoundObject = page.body[id - 1].body.find(\n      item => item.compoundGlobalID === parseInt(e.currentTarget.dataset.id)\n    );\n    compoundObject[e.target.name] = e.target.checked;\n    localStorage.setItem('pageBody', JSON.stringify(page));\n  }\n}\n\n// console.log(\n//   JSON.parse(\n//     '{\"body\":[{\"globalSchemeID\":1,\"body\":[{\"compoundGlobalID\":1,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":2,\"mw\":\"25.8458\",\"smiles\":\"cbxc\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":3,\"mw\":\"54.0916\",\"smiles\":\"cccc\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":4,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":5,\"mw\":\"67.1106\",\"smiles\":\"ccccc\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":\"123\"},{\"compoundGlobalID\":6,\"mw\":\"100.204\",\"smiles\":\"CCCCCCC\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":7,\"mw\":\"83.1533\",\"smiles\":\"CCCccc\",\"isTestSuccessful\":true,\"isScalingSuccessful\":true,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":8,\"mw\":\"13.8348\",\"smiles\":\"\",\"isTestSuccessful\":true,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":14,\"mw\":\"123.218\",\"smiles\":\"CCCCccccc\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":24,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null}]},{\"globalSchemeID\":2,\"body\":[{\"compoundGlobalID\":30,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null}]},{\"globalSchemeID\":3,\"body\":[{\"compoundGlobalID\":31,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null}]},{\"globalSchemeID\":4,\"body\":[{\"compoundGlobalID\":32,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null}]},{\"globalSchemeID\":5,\"body\":[{\"compoundGlobalID\":33,\"mw\":null,\"smiles\":null,\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null},{\"compoundGlobalID\":34,\"mw\":\"25.8458\",\"smiles\":\"cbxc\",\"isTestSuccessful\":false,\"isScalingSuccessful\":false,\"fractions\":[],\"dbID\":null}]}]}'\n//   )\n// );\n","import { Page } from './page';\nimport { Scheme } from './scheme';\nimport { Compound } from './compound';\nimport { Fraction } from './fraction';\n\nexport function getFromLocalStorage() {\n  if (!localStorage.getItem('pageBody')) {\n    return null;\n  }\n  const page = new Page();\n\n  const data = JSON.parse(localStorage.getItem('pageBody'));\n  for (schemeData of data.body) {\n    const scheme = new Scheme();\n    page.body.push(scheme);\n\n    for (compoundData of schemeData.body) {\n      const compound = new Compound(\n        compoundData,\n        compoundData.compoundGlobalID\n      );\n      scheme.body.push(compound);\n\n      for (fractionData of compoundData.fractions) {\n        const fraction = new Fraction();\n        compound.fractions.push(fraction);\n      }\n    }\n  }\n\n  return page;\n}\n\n// export function\n"],"names":["Object","defineProperty","$da4b248c00322402$exports","value","default","obj","key","enumerable","configurable","writable","$e41e2b2a0e9bee93$export$b336c2702c498be5","constructor","this","fractionGlobalID","mass","purity","isNMR","isLCMS","comment","$parcel$interopDefault","$43a9ed44bede0182$export$3898397e4b5f0c95","addFraction","fractions","push","mw","dbID","smiles","isTestSuccessful","isScalingSuccessful","globalCompoundID","compoundGlobalID","$8284cf7668aede83$export$8892eb4527f7cb1c","schemeID","isLastInScheme","markup","document","querySelector","insertAdjacentHTML","$0948148d908f2cee$export$c82fc41ad191f9b2","addCompound","body","globalSchemeID","$852d6df3b960d687$export$6955bcca4cd3539f","addScheme","$0917f25bfc47667f$var$schemeButton","$0917f25bfc47667f$var$sheet","$0917f25bfc47667f$var$globalCompoundID","parseInt","localStorage","getItem","$0917f25bfc47667f$var$globalSchemeID","$0917f25bfc47667f$var$smilesDrawer","SmilesDrawer","Drawer","width","height","$0917f25bfc47667f$var$page","page","data","JSON","parse","schemeData","scheme","compoundData","compound","fractionData","fraction","length","i","currentScemeID","sortedSchemeBody","sort","a","b","item","tree","draw","console","log","$0917f25bfc47667f$var$schemes","querySelectorAll","addEventListener","e1","currentSchemeID","currentTarget","dataset","schemeid","target","name","preventDefault","disabled","setItem","lastChild","e","$0917f25bfc47667f$var$textInputHandler","$0917f25bfc47667f$var$checkboxClicksHandler","stringify","currentSchemeID1","currentCompoundID","addedScheme","e2","alert","$0917f25bfc47667f$var$formsCollection","form","parentNode","nodeName","type","compoundObject","find","id","molWeightInput","formula","getMolecularFormula","calc","checked"],"version":3,"file":"index.fb4c5b86.js.map"}